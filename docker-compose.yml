services:

  mysql:
    image: mysql:8.0
    container_name: mysql
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-uroot", "-proot"]
      interval: 5s
      timeout: 3s
      retries: 10
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: kitchen
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
    networks:
      - kitchen-network

  nginx:
    image: nginx:latest
    container_name: nginx-reverse-proxy
    ports:
      - "80:80"
    volumes:
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - kitchen-api
      - kitchen-history
      - kitchen-monitoring
      - kitchen-web
    networks:
      - kitchen-network

  kitchen-api:
    build:
      context: ./kitchen-backend
      dockerfile: Dockerfile
    container_name: kitchen-api
    depends_on:
      mysql:
        condition: service_healthy
      localstack:
        condition: service_started
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://mysql:3306/kitchen?useSSL=false&allowPublicKeyRetrieval=true&serverTimezone=UTC
      APP_BASE_URL: http://localhost
      SQS_ENDPOINT: http://localstack:4566
      SNS_ENDPOINT: http://localstack:4566
    networks:
      - kitchen-network

  kitchen-history:
    build:
      context: ./kitchen-history
      dockerfile: Dockerfile
    container_name: kitchen-history
    depends_on:
      mysql:
        condition: service_healthy
      localstack:
        condition: service_started
    networks:
      - kitchen-network

  kitchen-monitoring:
    build:
      context: ./kitchen-order-monitoring
      dockerfile: Dockerfile
    container_name: kitchen-monitoring
    depends_on:
      localstack:
        condition: service_started
    networks:
      - kitchen-network

  localstack:
    image: localstack/localstack:latest
    container_name: localstack
    logging:
      driver: "none"
    ports:
      - "4566:4566"
    environment:
      - SERVICES=sqs,sns,lambda,dynamodb
      - DEBUG=0
      - PERSISTENCE=1
      - AWS_DEFAULT_REGION=us-east-1
      - LAMBDA_EXECUTOR=docker
    volumes:
      - "./.localstack:/var/lib/localstack"
      - "/var/run/docker.sock:/var/run/docker.sock"
      - ./localstack/init-resources.sh:/etc/localstack/init/ready.d/init-resources.sh
      - ./order-lambda/target/order-lambda-1.0-SNAPSHOT.jar:/tmp/order-lambda.jar
      - ./stock-lambda/target/stock-lambda-1.0-SNAPSHOT.jar:/tmp/stock-lambda.jar
      - ./payment-lambda/target/payment-lambda-1.0-SNAPSHOT.jar:/tmp/payment-lambda.jar
    networks:
      - kitchen-network

  stock-lambda:
    build: ./stock-lambda
    image: stock-lambda:latest
    container_name: stock-lambda
    networks:
      - kitchen-network
    depends_on:
      - localstack

  order-lambda:
    build: ./order-lambda
    image: order-lambda:latest
    container_name: order-lambda
    networks:
      - kitchen-network
    depends_on:
      - localstack

  payment-lambda:
    build: ./payment-lambda
    image: payment-lambda:latest
    container_name: payment-lambda
    networks:
      - kitchen-network
    depends_on:
      - localstack

  kitchen-web:
    build:
      context: ./kitchen-web
      dockerfile: Dockerfile
    container_name: kitchen-web
    volumes:
      - ./kitchen-web:/app
      - /app/node_modules
    environment:
      - CHOKIDAR_USEPOLLING=true
    command: npm run start:public
    networks:
      - kitchen-network

  redis:
    image: redis:7.2
    container_name: redis-server
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - ./redis-data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: ["redis-server", "/usr/local/etc/redis/redis.conf"]
    networks:
      - kitchen-network


networks:
  kitchen-network:
    driver: bridge

volumes:
  mysql_data:
  node_modules:
  redis_data: